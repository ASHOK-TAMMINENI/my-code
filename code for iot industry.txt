#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <LiquidCrystal_I2C.h>

// WiFi Credentials
const char* ssid = "smart";
const char* password = "smart@123";

// MQTT Broker Details
const char* mqttServer = "192.168.0.10";
const int mqttPort = 1883;
const char* mqttUser = "smart";
const char* mqttPassword = "smart@123";
const char* mqttTopic = "sensors/data";

// Sensor Pins
#define DHTPIN 4     // DHT11 Data pin
#define DHTTYPE DHT11   // DHT11 Sensor
#define FIRE_SENSOR_PIN 15
#define CURRENT_SENSOR_PIN 36 // ADC1 Channel 0
#define GAS_SENSOR_PIN 39    // ADC1 Channel 3
#define RELAY_PIN 27

// Sensor Thresholds (Adjust as needed)
const float currentThreshold = 1.0; // Amps
const int gasThreshold = 2000;     // Adjust based on sensor readings

// DHT11 Setup
DHT dht(DHTPIN, DHTTYPE);

// LCD I2C Setup
LiquidCrystal_I2C lcd(0x27, 16, 2); // Change address if needed

// MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);

  pinMode(FIRE_SENSOR_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);

  dht.begin();
  lcd.init();
  lcd.backlight();
  lcd.print("Sensor Monitor");

  // WiFi Connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // MQTT Connection
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  reconnect();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Read Sensor Data
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  int fireValue = digitalRead(FIRE_SENSOR_PIN);
  float current = readCurrent(); // Implement readCurrent() function
  int gasValue = analogRead(GAS_SENSOR_PIN);

  // Display Sensor Data on LCD
  lcd.setCursor(0, 1);
  lcd.print("T:");
  lcd.print(temperature);
  lcd.print(" H:");
  lcd.print(humidity);
  lcd.print(" ");

  // Publish Sensor Data to MQTT
  String payload = "{\"temperature\":" + String(temperature) + ",\"humidity\":" + String(humidity) + ",\"fire\":" + String(fireValue) + ",\"current\":" + String(current) + ",\"gas\":" + String(gasValue) + "}";
  client.publish(mqttTopic, payload.c_str());

  // Fire Detection and Relay Control
  if (fireValue == LOW) { // Fire sensor is active LOW
    Serial.println("Fire Detected!");
    digitalWrite(RELAY_PIN, LOW); // Turn off bulb
  } else {
    digitalWrite(RELAY_PIN, HIGH); // Turn on bulb
  }

  // Current and Gas Sensor Alerts
  if (current > currentThreshold) {
    Serial.println("Overcurrent Detected!");
    client.publish(mqttTopic, "Overcurrent Detected!");
  }

  if (gasValue > gasThreshold) {
    Serial.println("Gas Leak Detected!");
    client.publish(mqttTopic, "Gas Leak Detected!");
  }

  // Serial Monitor Output
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print("Â°C, Humidity: ");
  Serial.print(humidity);
  Serial.print("%, Fire: ");
  Serial.print(fireValue);
  Serial.print(", Current: ");
  Serial.print(current);
  Serial.print("A, Gas: ");
  Serial.println(gasValue);

  delay(2000); // Read sensors every 2 seconds
}

float readCurrent() {
  int rawValue = analogRead(CURRENT_SENSOR_PIN);
  // Implement your current sensor calibration here
  // Example for ACS712 30A:
  float voltage = rawValue * (3.3 / 4095.0); // Assuming 3.3V reference
  float current = (voltage - 1.65) / 0.066; // Adjust calibration values as needed
  return abs(current);
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("connected");
      client.subscribe(mqttTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}